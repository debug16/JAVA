1、方法的重载和方法的覆盖的原则分别是什么？
    方法覆盖和方法重载是完全不同的两个概念。
    方法重载：在同一个类中若有若干同名而参数不同参数个数不同的方法，使用不同的参数个数和类型可以分别调用同名方法的不同版本；
    方法覆盖：在子类中用与父类中相同的方法名、返回类型和参数，重新构造父类的某一成员方法。

2、super this的意义分别是什么？
    1、super
        可以直接调用父类的属性、方法、构造方法。但在调用构造方法时，【this】和【super】不能同时使用，因为只要是调用构造方法，就必须放在构造方法的【首行】。
    2、this
        成员变量和局部变量重名时，可以用this来区分。
        可以用在构造函数中，调用其它构造函数（【只能定义在构造函数的第一行】，因为初始化时必须被先执行）。

　　1、super()从子类中调用父类的构造方法，this()在同一类内调用其它方法。
　　2、this和super不能同时出现在一个构造函数里面。
　　3、super()和this()均需放在构造方法内第一行。
　　4、this()和super()都指的是对象，所以，均不可以在【static】环境中使用

3、什么是抽象类？它的特点是什么？
    什么是抽象类
        使用【abstract】修饰符修饰的类被称为抽象类

    抽象类的特点
        1、抽象类和抽象方法都需要用【abstract】修饰
        2、抽象方法必须在抽象类中，抽象类中可以没有抽象方法
        3、抽象类不能直接创造对象（实例化）
        4、抽象类的子类如果重写所有抽象方法，那么就是一个具体的类
        5、抽象类的子类不重写所有抽象方法，那么子类还是一个抽象类
        6、抽象类有构造方法，目的是让子类来调用构造方法初始化